// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  username String
  password String
  bio String @db.VarChar(140)
  dp       String   // URL to the user's display picture
  chats    ChatUser[] // Relationship with Chat via join table
  friends User[] @relation("Friendship")
  friendOf User[] @relation("Friendship")
  sentMessages Message[] @relation(name: "Author")
  receivedMessages Message[] @relation(name: "Recipient")
}

model Message {
  id          Int      @id @default(autoincrement())
  textContent String @db.VarChar(5000)
  author      User     @relation(name:"Author", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  recipient   User     @relation(name:"Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId Int
  createdAt   DateTime @default(now())
  imgContent  String?  // Optional field to store image URL
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade) // Message belongs to a Chat
  chatId      Int
}

model Chat {
  id        Int       @id @default(autoincrement())
  isGroup   Boolean   // Distinguish between group chats and individual chats
  groupDp   String?   // Group display picture, null for individual chats
  title     String? @db.VarChar(100)  // Group title, null for individual chats
  description String? @db.VarChar(5000)//Group description
  createdAt DateTime @default(now())
  messages  Message[] // Messages within the chat
  members   ChatUser[]  // Relationship with User via join table
}

// Join table to represent Chat members
model ChatUser {
  id      Int   @id @default(autoincrement())
  chat    Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade) 
  chatId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  joinedAt DateTime @default(now()) // Optional: track when the user joined the chat
  role String @default("member")

  @@unique([chatId, userId]) // Ensure a user can't join the same chat multiple times
}
